System structures
  There should be one layer below Main to manage low level ideas
  Return the variables via function if:
    Changing often
    Needed the previous instance
    
System implementation
  System flow
    Always start by looking the start state
  Data Management
    Creation of data
      Anything related to data should happen in DataManager
    Load
      Will add fields along the way to make it easier the system to read
    Save
      Follow the format of File
    File
      [name]Data.json
        key
          id
          name
      [name]Meta.json
        key
          parentId
          childrenIds
  Controls
    F2: Edit node
    Enter: Create Sibling / Enter edited text
    Tab: Create child
    Mouse Drag:
      Screen scroll
    Mouse Scroll:
      Zoom
    Delete:
  Design:
    State
      State of the system
      Pass the needed data as data to the next state
    Controls
      Every state will have this
      To be able to manage the growing code
      Other options:
        Putting the event listener in the Utils will make it hard to maintain
        As all the controls will be put in the Utils
      Option 2
        What if we put codes in their respective controls?
        Almost the same
    Utils
      Contains all the common code from states

Managing Json File
  Saved and loaded as one File
  Even if we optimize it, this can still be encapsulated in the future
  Meta System:
    activeMeta: string
    meta-[name]: Map

Done
  Refactor
    Rename allData to nodes
    Rename allMetaData to Meta
    Rename node.name to node.text
Current
  Create new data
  Just make it more usable
    As it will automatically lead to a point where it is really usable
Todo
  High
    Implement getting the text from the node
  Medium
  Low
    Remove node.id and just use the key as the id
      Affected changes
        Reingold-Tilford
        Unit test
        Overall system
      *Need to prove that this is necessary



  